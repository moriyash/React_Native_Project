// services/NotificationService.js - ◊í◊®◊°◊î ◊¢◊ù axios

import axios from 'axios';

const API_BASE_URL = 'http://192.168.0.101:3000/api'; // üîß ◊î◊ó◊ú◊£ ◊ê◊™ ◊ñ◊î ◊ú◊õ◊™◊ï◊ë◊™ ◊î◊©◊®◊™ ◊©◊ú◊ö

// Create axios instance for notifications
const notificationClient = axios.create({
  baseURL: API_BASE_URL,
  timeout: 10000,
  headers: {
    'Content-Type': 'application/json',
  },
});

class NotificationService {
  
  // ◊ß◊ë◊ú◊™ ◊õ◊ú ◊î◊î◊™◊®◊ê◊ï◊™ ◊©◊ú ◊î◊û◊©◊™◊û◊©
  async getUserNotifications(userId) {
    try {
      console.log('üì¨ Fetching notifications for user:', userId);
      
      const response = await notificationClient.get('/notifications', {
        params: { userId }
      });

      console.log('‚úÖ Notifications fetched successfully:', response.data?.data?.length || 0);
      return {
        success: true,
        data: response.data?.data || []
      };
      
    } catch (error) {
      console.error('‚ùå Notification fetch error:', error.response?.data || error.message);
      return {
        success: false,
        message: error.response?.data?.message || 'Network error - could not fetch notifications'
      };
    }
  }

  // ◊°◊ô◊û◊ï◊ü ◊î◊™◊®◊ê◊î ◊õ◊†◊ß◊®◊ê◊î
  async markAsRead(notificationId) {
    try {
      console.log('üëÅÔ∏è Marking notification as read:', notificationId);
      
      const response = await notificationClient.put(`/notifications/${notificationId}/read`);

      console.log('‚úÖ Notification marked as read');
      return {
        success: true,
        data: response.data?.data
      };
      
    } catch (error) {
      console.error('‚ùå Mark as read error:', error.response?.data || error.message);
      return {
        success: false,
        message: error.response?.data?.message || 'Network error'
      };
    }
  }

  // ◊°◊ô◊û◊ï◊ü ◊õ◊ú ◊î◊î◊™◊®◊ê◊ï◊™ ◊õ◊†◊ß◊®◊ê◊ï
  async markAllAsRead(userId) {
    try {
      console.log('üëÅÔ∏è Marking all notifications as read for user:', userId);
      
      const response = await notificationClient.put('/notifications/mark-all-read', {
        userId
      });

      console.log('‚úÖ All notifications marked as read');
      return {
        success: true,
        data: response.data
      };
      
    } catch (error) {
      console.error('‚ùå Mark all as read error:', error.response?.data || error.message);
      return {
        success: false,
        message: error.response?.data?.message || 'Network error'
      };
    }
  }

  // ◊ß◊ë◊ú◊™ ◊û◊°◊§◊® ◊î◊™◊®◊ê◊ï◊™ ◊ú◊ê ◊†◊ß◊®◊ê◊ï
  async getUnreadCount(userId) {
    try {
      const response = await notificationClient.get('/notifications/unread-count', {
        params: { userId }
      });

      return {
        success: true,
        count: response.data?.count || 0
      };
      
    } catch (error) {
      console.error('‚ùå Get unread count error:', error);
      return {
        success: false,
        count: 0
      };
    }
  }

  // üÜï ◊§◊ï◊†◊ß◊¶◊ô◊ô◊™ helper ◊ú◊®◊¢◊†◊ï◊ü ◊î◊™◊®◊ê◊ï◊™
  async refreshNotifications(userId, callback) {
    const result = await this.getUserNotifications(userId);
    if (result.success && callback) {
      callback(result.data);
    }
    return result;
  }

  // üÜï ◊§◊ï◊†◊ß◊¶◊ô◊ô◊™ helper ◊ú◊®◊¢◊†◊ï◊ü counter
  async refreshUnreadCount(userId, callback) {
    const result = await this.getUnreadCount(userId);
    if (result.success && callback) {
      callback(result.count);
    }
    return result;
  }

  // üÜï ◊û◊ó◊ô◊ß◊™ ◊î◊™◊®◊ê◊î (◊ê◊ï◊§◊¶◊ô◊ï◊†◊ú◊ô - ◊ú◊¢◊™◊ô◊ì)
  async deleteNotification(notificationId) {
    try {
      console.log('üóëÔ∏è Deleting notification:', notificationId);
      
      const response = await notificationClient.delete(`/notifications/${notificationId}`);

      console.log('‚úÖ Notification deleted');
      return {
        success: true,
        data: response.data
      };
      
    } catch (error) {
      console.error('‚ùå Delete notification error:', error.response?.data || error.message);
      return {
        success: false,
        message: error.response?.data?.message || 'Network error'
      };
    }
  }

  // üÜï ◊û◊ó◊ô◊ß◊™ ◊õ◊ú ◊î◊î◊™◊®◊ê◊ï◊™ (◊ê◊ï◊§◊¶◊ô◊ï◊†◊ú◊ô - ◊ú◊¢◊™◊ô◊ì)
  async deleteAllNotifications(userId) {
    try {
      console.log('üóëÔ∏è Deleting all notifications for user:', userId);
      
      const response = await notificationClient.delete('/notifications/delete-all', {
        data: { userId }
      });

      console.log('‚úÖ All notifications deleted');
      return {
        success: true,
        data: response.data
      };
      
    } catch (error) {
      console.error('‚ùå Delete all notifications error:', error.response?.data || error.message);
      return {
        success: false,
        message: error.response?.data?.message || 'Network error'
      };
    }
  }

  // üÜï ◊§◊ï◊†◊ß◊¶◊ô◊ô◊™ helper ◊ú◊ë◊ì◊ô◊ß◊î ◊ê◊ù ◊ô◊© ◊î◊™◊®◊ê◊ï◊™ ◊ó◊ì◊©◊ï◊™
  async hasNewNotifications(userId, lastChecked) {
    try {
      const result = await this.getUserNotifications(userId);
      if (result.success && result.data.length > 0) {
        const latestNotification = result.data[0]; // ◊î◊®◊ê◊©◊ï◊ü ◊ë◊®◊©◊ô◊û◊î (◊î◊õ◊ô ◊ó◊ì◊©)
        const latestTime = new Date(latestNotification.createdAt);
        const lastCheckedTime = new Date(lastChecked);
        
        return {
          success: true,
          hasNew: latestTime > lastCheckedTime,
          latestNotification
        };
      }
      return {
        success: true,
        hasNew: false
      };
    } catch (error) {
      console.error('‚ùå Check new notifications error:', error);
      return {
        success: false,
        hasNew: false
      };
    }
  }

  // üÜï ◊§◊ï◊†◊ß◊¶◊ô◊ô◊™ helper ◊ú◊ß◊ë◊ú◊™ ◊°◊ò◊ò◊ô◊°◊ò◊ô◊ß◊ï◊™ ◊î◊™◊®◊ê◊ï◊™
  async getNotificationStats(userId) {
    try {
      const result = await this.getUserNotifications(userId);
      if (result.success) {
        const notifications = result.data;
        const totalCount = notifications.length;
        const unreadCount = notifications.filter(n => !n.read).length;
        const readCount = totalCount - unreadCount;
        
        // ◊°◊ò◊ò◊ô◊°◊ò◊ô◊ß◊ï◊™ ◊ú◊§◊ô ◊°◊ï◊í
        const typeStats = notifications.reduce((acc, notification) => {
          acc[notification.type] = (acc[notification.type] || 0) + 1;
          return acc;
        }, {});

        return {
          success: true,
          stats: {
            totalCount,
            unreadCount,
            readCount,
            typeBreakdown: typeStats
          }
        };
      }
      return {
        success: false,
        stats: null
      };
    } catch (error) {
      console.error('‚ùå Get notification stats error:', error);
      return {
        success: false,
        stats: null
      };
    }
  }
}

export const notificationService = new NotificationService();